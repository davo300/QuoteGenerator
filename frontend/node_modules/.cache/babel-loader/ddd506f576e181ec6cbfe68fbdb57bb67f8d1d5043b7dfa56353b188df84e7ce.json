{"ast":null,"code":"var _jsxFileName = \"/Users/mattdavies/react-app/quote-app/frontend/src/QuoteGenerator.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport styles from \"./Quote.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuoteGenerator = () => {\n  _s();\n  const [quote, setQuote] = useState(\"Click below to get inspired!\");\n  const fetchQuote = async () => {\n    try {\n      const res = await fetch(\"http://localhost:8000/quotes/random\");\n      if (!res.ok) {\n        throw new Error(\"Failed to fetch quote\");\n      }\n      const data = await res.json();\n      setQuote(data.text);\n    } catch (error) {\n      console.error(\"Error fetching quote:\", error);\n      setQuote(\"Oops! Could not load a quote. Try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.quoteText,\n      children: quote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: styles.button,\n      onClick: fetchQuote,\n      children: \"Inspire Me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(QuoteGenerator, \"zwnyPHmjxhBd6PDNN3GyNgJnCYw=\");\n_c = QuoteGenerator;\nexport default QuoteGenerator;\nvar _c;\n$RefreshReg$(_c, \"QuoteGenerator\");","map":{"version":3,"names":["React","useState","styles","jsxDEV","_jsxDEV","QuoteGenerator","_s","quote","setQuote","fetchQuote","res","fetch","ok","Error","data","json","text","error","console","className","container","children","quoteText","fileName","_jsxFileName","lineNumber","columnNumber","button","onClick","_c","$RefreshReg$"],"sources":["/Users/mattdavies/react-app/quote-app/frontend/src/QuoteGenerator.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport styles from \"./Quote.module.css\";\n\nconst QuoteGenerator: React.FC = () => {\n  const [quote, setQuote] = useState<string>(\"Click below to get inspired!\");\n\n  const fetchQuote = async () => {\n    try {\n      const res = await fetch(\"http://localhost:8000/quotes/random\");\n      if (!res.ok) {\n        throw new Error(\"Failed to fetch quote\");\n      }\n      const data = await res.json();\n      setQuote(data.text);\n    } catch (error) {\n      console.error(\"Error fetching quote:\", error);\n      setQuote(\"Oops! Could not load a quote. Try again.\");\n    }\n  };\n\n  return (\n    <div className={styles.container}>\n      <p className={styles.quoteText}>{quote}</p>\n      <button className={styles.button} onClick={fetchQuote}>\n        Inspire Me\n      </button>\n    </div>\n  );\n};\n\nexport default QuoteGenerator;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,cAAwB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAS,8BAA8B,CAAC;EAE1E,MAAMQ,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,qCAAqC,CAAC;MAC9D,IAAI,CAACD,GAAG,CAACE,EAAE,EAAE;QACX,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MACA,MAAMC,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,CAAC;MAC7BP,QAAQ,CAACM,IAAI,CAACE,IAAI,CAAC;IACrB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CT,QAAQ,CAAC,0CAA0C,CAAC;IACtD;EACF,CAAC;EAED,oBACEJ,OAAA;IAAKe,SAAS,EAAEjB,MAAM,CAACkB,SAAU;IAAAC,QAAA,gBAC/BjB,OAAA;MAAGe,SAAS,EAAEjB,MAAM,CAACoB,SAAU;MAAAD,QAAA,EAAEd;IAAK;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3CtB,OAAA;MAAQe,SAAS,EAAEjB,MAAM,CAACyB,MAAO;MAACC,OAAO,EAAEnB,UAAW;MAAAY,QAAA,EAAC;IAEvD;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAACpB,EAAA,CAzBID,cAAwB;AAAAwB,EAAA,GAAxBxB,cAAwB;AA2B9B,eAAeA,cAAc;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}