{"ast":null,"code":"var _jsxFileName = \"/Users/mattdavies/react-app/quote-app/frontend/src/QuoteGenerator.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddQuoteForm = () => {\n  _s();\n  const [text, setText] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const handleSubmit = async () => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:8000/quotes\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          text: newQuote,\n          // must be \"text\", not \"quote\"\n          author: newAuthor // must be \"author\"\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to add quote\");\n      }\n      const data = await response.json();\n      console.log(\"Quote added:\", data);\n    } catch (error) {\n      console.error(\"Error adding quote:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Quote text\",\n      value: text,\n      onChange: e => setText(e.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Author (optional)\",\n      value: author,\n      onChange: e => setAuthor(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Add Quote\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(AddQuoteForm, \"zsK5dsOK6XmPRH4bhREjqE9E2G0=\");\n_c = AddQuoteForm;\nexport default AddQuoteForm;\nvar _c;\n$RefreshReg$(_c, \"AddQuoteForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","AddQuoteForm","_s","text","setText","author","setAuthor","handleSubmit","response","fetch","method","headers","body","JSON","stringify","newQuote","newAuthor","ok","Error","data","json","console","log","error","onSubmit","children","type","placeholder","value","onChange","e","target","required","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mattdavies/react-app/quote-app/frontend/src/QuoteGenerator.tsx"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst AddQuoteForm: React.FC = () => {\n  const [text, setText] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n\n  const handleSubmit = async () => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:8000/quotes\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          text: newQuote,   // must be \"text\", not \"quote\"\n          author: newAuthor // must be \"author\"\n        }),\n      });\n  \n      if (!response.ok) {\n        throw new Error(\"Failed to add quote\");\n      }\n  \n      const data = await response.json();\n      console.log(\"Quote added:\", data);\n    } catch (error) {\n      console.error(\"Error adding quote:\", error);\n    }\n  };\n  \n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"Quote text\"\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n        required\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Author (optional)\"\n        value={author}\n        onChange={(e) => setAuthor(e.target.value)}\n      />\n      <button type=\"submit\">Add Quote</button>\n    </form>\n  );\n};\n\nexport default AddQuoteForm;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,YAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMS,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;QAC3DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBX,IAAI,EAAEY,QAAQ;UAAI;UAClBV,MAAM,EAAEW,SAAS,CAAC;QACpB,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;MACxC;MAEA,MAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEH,IAAI,CAAC;IACnC,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C;EACF,CAAC;EAGD,oBACEvB,OAAA;IAAMwB,QAAQ,EAAEjB,YAAa;IAAAkB,QAAA,gBAC3BzB,OAAA;MACE0B,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,YAAY;MACxBC,KAAK,EAAEzB,IAAK;MACZ0B,QAAQ,EAAGC,CAAC,IAAK1B,OAAO,CAAC0B,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MACzCI,QAAQ;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC,eACFpC,OAAA;MACE0B,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,mBAAmB;MAC/BC,KAAK,EAAEvB,MAAO;MACdwB,QAAQ,EAAGC,CAAC,IAAKxB,SAAS,CAACwB,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC,eACFpC,OAAA;MAAQ0B,IAAI,EAAC,QAAQ;MAAAD,QAAA,EAAC;IAAS;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpC,CAAC;AAEX,CAAC;AAAClC,EAAA,CA/CID,YAAsB;AAAAoC,EAAA,GAAtBpC,YAAsB;AAiD5B,eAAeA,YAAY;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}