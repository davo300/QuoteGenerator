{"ast":null,"code":"var _jsxFileName = \"/Users/mattdavies/react-app/quote-app/frontend/src/QuoteGenerator.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddQuoteForm = () => {\n  _s();\n  const [text, setText] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch(\"http://127.0.0.1:8000/quotes\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          text: quote,\n          // match your state variable for the quote\n          author: author // match your state variable for the author\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const addedQuote = await response.json();\n      console.log(\"Quote added:\", addedQuote);\n\n      // Optionally, reset input fields after adding\n      setQuote(\"\");\n      setAuthor(\"\");\n    } catch (error) {\n      console.error(\"Error adding quote:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Quote text\",\n      value: text,\n      onChange: e => setText(e.target.value),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Author (optional)\",\n      value: author,\n      onChange: e => setAuthor(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Add Quote\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(AddQuoteForm, \"zsK5dsOK6XmPRH4bhREjqE9E2G0=\");\n_c = AddQuoteForm;\nexport default AddQuoteForm;\nvar _c;\n$RefreshReg$(_c, \"AddQuoteForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","AddQuoteForm","_s","text","setText","author","setAuthor","handleSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","quote","ok","Error","status","addedQuote","json","console","log","setQuote","error","onSubmit","children","type","placeholder","value","onChange","target","required","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mattdavies/react-app/quote-app/frontend/src/QuoteGenerator.tsx"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst AddQuoteForm: React.FC = () => {\n  const [text, setText] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n  \n    try {\n      const response = await fetch(\"http://127.0.0.1:8000/quotes\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          text: quote,    // match your state variable for the quote\n          author: author, // match your state variable for the author\n        }),\n      });\n  \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n  \n      const addedQuote = await response.json();\n      console.log(\"Quote added:\", addedQuote);\n  \n      // Optionally, reset input fields after adding\n      setQuote(\"\");\n      setAuthor(\"\");\n  \n    } catch (error) {\n      console.error(\"Error adding quote:\", error);\n    }\n  };\n  \n  \n  \n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"Quote text\"\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n        required\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Author (optional)\"\n        value={author}\n        onChange={(e) => setAuthor(e.target.value)}\n      />\n      <button type=\"submit\">Add Quote</button>\n    </form>\n  );\n};\n\nexport default AddQuoteForm;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,YAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMS,YAAY,GAAG,MAAOC,CAAkB,IAAK;IACjDA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;QAC3DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBb,IAAI,EAAEc,KAAK;UAAK;UAChBZ,MAAM,EAAEA,MAAM,CAAE;QAClB,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACK,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBT,QAAQ,CAACU,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,UAAU,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MACxCC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEH,UAAU,CAAC;;MAEvC;MACAI,QAAQ,CAAC,EAAE,CAAC;MACZnB,SAAS,CAAC,EAAE,CAAC;IAEf,CAAC,CAAC,OAAOoB,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C;EACF,CAAC;EAKD,oBACE1B,OAAA;IAAM2B,QAAQ,EAAEpB,YAAa;IAAAqB,QAAA,gBAC3B5B,OAAA;MACE6B,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,YAAY;MACxBC,KAAK,EAAE5B,IAAK;MACZ6B,QAAQ,EAAGxB,CAAC,IAAKJ,OAAO,CAACI,CAAC,CAACyB,MAAM,CAACF,KAAK,CAAE;MACzCG,QAAQ;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC,eACFtC,OAAA;MACE6B,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,mBAAmB;MAC/BC,KAAK,EAAE1B,MAAO;MACd2B,QAAQ,EAAGxB,CAAC,IAAKF,SAAS,CAACE,CAAC,CAACyB,MAAM,CAACF,KAAK;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC,eACFtC,OAAA;MAAQ6B,IAAI,EAAC,QAAQ;MAAAD,QAAA,EAAC;IAAS;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpC,CAAC;AAEX,CAAC;AAACpC,EAAA,CAxDID,YAAsB;AAAAsC,EAAA,GAAtBtC,YAAsB;AA0D5B,eAAeA,YAAY;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}